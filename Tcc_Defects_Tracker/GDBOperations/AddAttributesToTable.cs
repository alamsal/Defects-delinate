using System;
using System.Collections.Generic;
using System.Windows.Forms;
using ESRI.ArcGIS.Geodatabase;
using Tcc_Defects_Tracker.GDBTables;
using Tcc_Defects_Tracker.Model;

namespace Tcc_Defects_Tracker.GDBOperations
{
    public class AddAttributesToTable
    {
        #region private members

        private LandsatScenes _scenes;
        private Source _source;
        private AssociatedMXDs _mxDs;
        private ModelType _modelType;
        private MrlcVintage _mrlcVintage;
        private ProductionProcess _productionProcess;
        private IWorkspace _workspace;

        #endregion private members

        #region properties
        //Holds autogenerated unique featureID for/from shp
        public string ShapeFeatureID { get; set;}
        
        #endregion properties
        
        #region Ctor
        public AddAttributesToTable(LandsatScenes scene, Source defectSource, AssociatedMXDs mxDs, ModelType modelType, MrlcVintage mrlcVintage, ProductionProcess productionProcess,IWorkspace workspace)
        {
            _scenes = scene;
            _source = defectSource;
            _mxDs = mxDs;
            _modelType = modelType;
            _mrlcVintage = mrlcVintage;
            _productionProcess = productionProcess;
            _workspace = workspace;
        }
        #endregion Ctor

        public void storeAttributesInTables()
        {
            CheckTableExitance(_workspace);
            StartStoring();


        }
        private void StartStoring()
        {
            try
            {
                _scenes.DefectId = _source.DefectId = _mxDs.DefectId = _modelType.DefectId = _mrlcVintage.DefectId = _productionProcess.DefectId = Convert.ToInt32(ShapeFeatureID);

                List<string> attributesValue = new List<string>() { _scenes.SceneId, _source.SourceName, _mxDs.MxdId, _modelType.ModelName, _mrlcVintage.ProductYear, _productionProcess.ProcessName };

                //Check existance of table
                IWorkspace2 ws2 = _workspace as IWorkspace2;
                IFeatureWorkspace featureWorkspace = _workspace as IFeatureWorkspace;

                var FieldName = Enum.GetValues(typeof(EnumTableFields));

                int index = 0;

                foreach (EnumTableNames tableName in Enum.GetValues(typeof(EnumTableNames)))
                {

                    if (ws2.get_NameExists(esriDatasetType.esriDTTable, tableName.ToString()))
                    {
                        List<string> attributeField = new AttributesHelper().GetAttributesList(FieldName.GetValue(0).ToString(), FieldName.GetValue(index + 1).ToString());
                        ITable table = featureWorkspace.OpenTable(tableName.ToString());
                        List<string> attributeValue = new AttributesHelper().GetAttributesList(_scenes.DefectId.ToString(), attributesValue[index]);

                        StoreAttributesInTableRow(table, attributeField, attributeValue);

                        index++;

                    }
                }
            }
            catch(Exception e)
            {
                MessageBox.Show("Can add attributes to Table"+ e.Message);
            }
            finally
            {
                GC.Collect();
            }
            
        }

        private void CheckTableExitance(IWorkspace workspace)
        {
           TablesBuilder createTables = new TablesBuilder(workspace);
           createTables.CreateTablesIfNotExist();
        }


        private void StoreAttributesInTableRow(ITable table, List<string> fields, List<string> values)
        {
            IRow row = table.CreateRow();

            for (int i = 0; i < fields.Count; i++)
            {
                int index = table.FindField(fields[i]);
                row.set_Value(index, values[i]);
            }

            row.Store();
        }
    }
}
